import crypto from 'crypto'

export interface FingerprintData {
  teamId: string
  sellerId?: string
  productSku: string
  artworkData?: any
  printSpecs?: any
}

export function createDesignFingerprint(data: FingerprintData): string {
  const fingerprintData = {
    team: data.teamId,
    seller: data.sellerId || '',
    sku: data.productSku,
    artwork: normalizeArtworkData(data.artworkData),
    specs: normalizePrintSpecs(data.printSpecs)
  }
  
  const hash = crypto
    .createHash('sha256')
    .update(JSON.stringify(fingerprintData, Object.keys(fingerprintData).sort()))
    .digest('hex')
  
  return hash.substring(0, 16)
}

function normalizeArtworkData(artworkData?: any): any {
  if (!artworkData) return {}
  
  return {
    text: artworkData.text || '',
    imageUrl: artworkData.imageUrl || artworkData.image_url || '',
    placement: artworkData.placement || 'front',
    color: artworkData.color || '',
    size: artworkData.size || ''
  }
}

function normalizePrintSpecs(printSpecs?: any): any {
  if (!printSpecs) return {}
  
  return {
    method: printSpecs.method || 'dtg',
    placement: printSpecs.placement || 'front',
    size: printSpecs.size || '',
    color: printSpecs.color || ''
  }
}

export async function findExistingDesign(
  teamId: string,
  fingerprint: string,
  prisma: any
) {
  return await prisma.design.findFirst({
    where: {
      teamId,
      fingerprint,
      status: 'ARCHIVED'
    },
    include: {
      _count: {
        select: {
          orderItems: true,
          fulfillments: true
        }
      }
    }
  })
}

export async function createDesignFromOrderItem(
  orderItem: any,
  order: any,
  teamId: string,
  sellerId: string,
  prisma: any
) {
  const fingerprint = createDesignFingerprint({
    teamId,
    sellerId,
    productSku: orderItem.product.sku,
    artworkData: orderItem.artworkData,
    printSpecs: orderItem.printSpecs
  })
  
  return await prisma.design.create({
    data: {
      teamId,
      name: `Auto: ${orderItem.product.name} - ${order.orderNumber}`,
      fingerprint,
      fileUrl: orderItem.artworkData?.imageUrl || '',
      artworkData: orderItem.artworkData,
      printSpecs: orderItem.printSpecs,
      sellerId,
      status: 'DRAFT',
      metadata: {
        autoGenerated: true,
        sourceOrderId: order.id,
        sourceOrderItemId: orderItem.id,
        generatedAt: new Date().toISOString()
      }
    }
  })
}